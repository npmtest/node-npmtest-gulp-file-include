{"/home/travis/build/npmtest/node-npmtest-gulp-file-include/test.js":"/* istanbul instrument in package npmtest_gulp_file_include */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-file-include/lib.npmtest_gulp_file_include.js":"/* istanbul instrument in package npmtest_gulp_file_include */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_file_include = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_file_include = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-file-include/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-file-include && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_file_include */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_file_include\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_file_include.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_file_include.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_file_include.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_file_include.__dirname + '/lib.npmtest_gulp_file_include.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-file-include/node_modules/gulp-file-include/lib/index.js":"'use strict';\n\nconst replaceOperator = require('./replace-operator');\nconst replaceFunction = require('./replace-function');\nconst replaceVariable = require('./replace-variable');\nconst concat = require('concat-stream');\nconst setIndent = require('./indent');\nconst through = require('through2');\nconst gutil = require('gulp-util');\nconst extend = require('extend');\nconst path = require('path');\nconst fs = require('fs');\n\nmodule.exports = function(opts) {\n  if (typeof opts === 'string') {\n    opts = {prefix: opts};\n  }\n\n  opts = extend({}, {\n    basepath: '@file',\n    prefix: '@@',\n    suffix: '',\n    context: {},\n    filters: false,\n    indent: false\n  }, opts);\n\n  if (opts.basepath !== '@file') {\n    opts.basepath = opts.basepath === '@root' ? process.cwd() : path.resolve(opts.basepath);\n  }\n\n  var customWebRoot = !!opts.context.webRoot;\n\n  function fileInclude(file, enc, cb) {\n    if (!customWebRoot) {\n      // built-in webRoot variable, example usage: <link rel=stylesheet href=@@webRoot/style.css>\n      opts.context.webRoot =\n        path.relative(path.dirname(file.path), file.base).replace(/\\\\/g, '/') || '.';\n      }\n\n    if (file.isNull()) {\n      cb(null, file);\n    } else if (file.isStream()) {\n      file.contents.pipe(concat(function(data) {\n        try {\n          data = include(file, String(data));\n          cb(null, data);\n        } catch (e) {\n          cb(new gutil.PluginError('gulp-file-include', e.message));\n        }\n      }));\n    } else if (file.isBuffer()) {\n      try {\n        file = include(file, String(file.contents));\n        cb(null, file);\n      } catch (e) {\n        cb(new gutil.PluginError('gulp-file-include', e.message));\n      }\n    }\n  }\n\n  return through.obj(fileInclude);\n\n  /**\n   * utils\n   */\n  function stripCommentedIncludes(content, opts) {\n    // remove single line html comments that use the format: <!-- @@include() -->\n    var regex = new RegExp('<\\!--(.*)' + opts.prefix + '[ ]*include([\\\\s\\\\S]*?)[ ]*' + opts.suffix + '-->', 'g');\n    return content.replace(regex, '');\n  }\n\n  function include(file, text, data) {\n    var filebase = opts.basepath === '@file' ? path.dirname(file.path) : opts.basepath;\n    var currentFilename = path.resolve(file.base, file.path);\n\n    data = extend(true, {}, opts.context, data || {});\n    data.content = text;\n\n    text = stripCommentedIncludes(text, opts);\n    text = replaceOperator(text, {\n      prefix: opts.prefix,\n      suffix: opts.suffix,\n      name: 'if',\n      handler: conditionalHandler\n    });\n    text = replaceOperator(text, {\n      prefix: opts.prefix,\n      suffix: opts.suffix,\n      name: 'for',\n      handler: forHandler\n    });\n    text = replaceVariable(text, data, opts);\n    text = replaceFunction(text, {\n      prefix: opts.prefix,\n      suffix: opts.suffix,\n      name: 'include',\n      handler: includeHandler\n    });\n    text = replaceFunction(text, {\n      prefix: opts.prefix,\n      suffix: opts.suffix,\n      name: 'loop',\n      handler: loopHandler\n    });\n\n    function conditionalHandler(inst) {\n      // jshint ignore: start\n      var condition = new Function('var context = this; with (context) { return ' + inst.args + '; }').call(data);\n      // jshint ignore: end\n\n      return condition ? inst.body : '';\n    }\n\n    function forHandler(inst) {\n      var condition = 'var context = this; with (context) { var result=\"\"; for' + inst.args + ' { result+=`' + inst.body + '`; } return result; }';\n      // jshint ignore: start\n      var result = new Function(condition).call(data);\n      // jshint ignore: end\n\n      return result;\n    }\n\n    function includeHandler(inst) {\n      var args = /[^)\"\\']*[\"\\']([^\"\\']*)[\"\\'](,\\s*({[\\s\\S]*})){0,1}\\s*/.exec(inst.args);\n\n      if (args) {\n        var includePath = path.resolve(filebase, args[1]);\n        // for checking if we are not including the current file again\n        if (currentFilename.toLowerCase() === includePath.toLowerCase()) {\n          throw new Error('recursion detected in file: ' + currentFilename);\n        }\n\n        var includeContent = fs.readFileSync(includePath, 'utf-8');\n\n        if (opts.indent) {\n          includeContent = setIndent(inst.before, inst.before.length, includeContent);\n        }\n\n        // need to double each `$` to escape it in the `replace` function\n        // includeContent = includeContent.replace(/\\$/gi, '$$$$');\n\n        // apply filters on include content\n        if (typeof opts.filters === 'object') {\n          includeContent = applyFilters(includeContent, args.input);\n        }\n\n        var recFile = new gutil.File({\n          cwd: process.cwd(),\n          base: file.base,\n          path: includePath,\n          contents: new Buffer(includeContent)\n        });\n\n        recFile = include(recFile, includeContent, args[3] ? JSON.parse(args[3]) : {});\n\n        return String(recFile.contents);\n      }\n    }\n\n    function loopHandler(inst) {\n      var args = /[^)\"\\']*[\"\\']([^\"\\']*)[\"\\'](,\\s*([\\s\\S]*())){0,1}\\s*/.exec(inst.args);\n      var arr = [];\n\n      if (args) {\n        // loop array in the json file\n        if (args[3].match(/^('|\")[^']|[^\"]('|\")$/)) {\n          // clean filename var and define path\n          var jsonfile = file.base + args[3].replace(/^('|\")/, '').replace(/('|\")$/, '');\n          // check if json file exists\n          if (fs.existsSync(jsonfile)) {\n            arr = require(jsonfile);\n          } else {\n            return console.error('JSON file not exists:', jsonfile);\n          }\n        } else {\n          // loop array in the function\n          try {\n            arr = JSON.parse(args[3]);\n          } catch (err) {\n            return console.error(err, args[3]);\n          }\n        }\n\n        if (arr) {\n          var includePath = path.resolve(filebase, args[1]);\n          // for checking if we are not including the current file again\n          if (currentFilename.toLowerCase() === includePath.toLowerCase()) {\n            throw new Error('recursion detected in file: ' + currentFilename);\n          }\n\n          var includeContent = fs.readFileSync(includePath, 'utf-8');\n\n          if (opts.indent) {\n            includeContent = setIndent(inst.before, inst.before.length, includeContent);\n          }\n\n          // apply filters on include content\n          if (typeof opts.filters === 'object') {\n            includeContent = applyFilters(includeContent, args.input);\n          }\n\n          var recFile = new gutil.File({\n            cwd: process.cwd(),\n            base: file.base,\n            path: includePath,\n            contents: new Buffer(includeContent)\n          });\n\n          var contents = '';\n\n          for (var i in arr) {\n            if (arr.hasOwnProperty(i)) {\n              var context = arr[i];\n              recFile = include(recFile, includeContent, args[3] ? context : {});\n              // why handler dont reconize underscore?\n              // if (typeof context == 'object' && typeof context['_key'] == 'undefined') {\n              //   context['_key'] = i;\n              // }\n              contents += String(recFile.contents);\n            }\n          }\n        }\n        return contents;\n      }\n    }\n\n    file.contents = new Buffer(text);\n\n    return file;\n  }\n\n  function applyFilters(includeContent, match) {\n    if (!match.match(/\\)+$/)) {\n      // nothing to filter return unchanged\n      return includeContent;\n    }\n\n    // now get the ordered list of filters\n    var filterlist = match.split('(').slice(0, -1);\n    filterlist = filterlist.map(function(str) {\n      return opts.filters[str.trim()];\n    });\n\n    // compose them together into one function\n    var filter = filterlist.reduce(compose);\n\n    // and apply the composed function to the stringified content\n    return filter(String(includeContent));\n  }\n};\n\nfunction compose(f, g) {\n  return function(x) {\n    return f(g(x));\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-gulp-file-include/node_modules/gulp-file-include/lib/replace-operator.js":"'use strict';\n\nconst balanced = require('balanced-match');\n\nmodule.exports = function parse(content, opts) {\n  var regexpStart = new RegExp(opts.prefix + '[ ]*' + opts.name + '([^{}]*)\\\\{');\n  var regexpEnd = opts.suffix ? new RegExp('^\\\\s*' + opts.suffix) : false;\n  var replacement;\n  var result = '';\n  var matchStart;\n  var matchBody;\n  var matchEnd;\n  var startEnd;\n  var before;\n\n  while (matchStart = regexpStart.exec(content)) {\n    startEnd = matchStart.index + matchStart[0].length;\n    matchBody = balanced('{', '}', content.slice(startEnd - 1));\n\n    if (matchBody && matchBody.start === 0) {\n      matchEnd = regexpEnd ? regexpEnd.exec(matchBody.post) : true;\n\n      if (matchEnd) {\n        before = content.slice(0, matchStart.index);\n        matchEnd = regexpEnd ? matchEnd[0].length : 0;\n        replacement = opts.handler({\n          before: before,\n          args: matchStart[1],\n          body: matchBody.body\n        });\n\n        if (replacement !== undefined) {\n          result += before + parse(replacement.toString(), opts);\n          content = content.slice(startEnd + matchBody.end + matchEnd);\n          continue;\n        }\n      }\n    }\n\n    result += content.slice(0, startEnd);\n    content = content.slice(startEnd);\n  }\n\n  result += content;\n\n  return result;\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-file-include/node_modules/gulp-file-include/lib/replace-function.js":"'use strict';\n\nconst balanced = require('balanced-match');\n\nmodule.exports = function(content, opts) {\n  var result = '';\n  var reStart = new RegExp(opts.prefix + '[ ]*' + opts.name + '\\\\(');\n  var reEnd = new RegExp('^[ ]*' + opts.suffix);\n  var matchStart;\n  var matchArg;\n  var matchEnd;\n  var safeStart;\n  var before;\n  var replacement;\n\n  while (matchStart = reStart.exec(content)) {\n    safeStart = matchStart.index + matchStart[0].length - 1;\n\n    matchArg = balanced('(', ')', content.slice(safeStart));\n\n    if (matchArg && matchArg.start === 0) {\n      if (opts.suffix) {\n        matchEnd = reEnd.exec(matchArg.post);\n      }\n\n      matchEnd = matchEnd ? matchEnd.index + matchEnd[0].length : 0;\n\n      if (!opts.suffix || matchEnd) {\n        before = content.slice(0, matchStart.index);\n        replacement = opts.handler({\n          before: before,\n          args: matchArg.body,\n        });\n\n        if (replacement !== undefined) {\n          result += before + replacement.toString();\n          content = content.slice(safeStart + matchArg.end + 1 + matchEnd);\n          continue;\n        }\n      }\n    }\n\n    result += content.slice(0, safeStart);\n    content = content.slice(safeStart);\n  }\n\n  result += content;\n\n  return result;\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-file-include/node_modules/gulp-file-include/lib/replace-variable.js":"'use strict';\n\nconst flatten = require('flatnest').flatten;\n\nmodule.exports = function(content, data, opts) {\n  var prefix = opts.prefix + '[ ]*';\n  var suffix = opts.suffix ? '[ ]*' + opts.suffix : '';\n  data = flatten(data);\n  // sort keys by longest keys to iterate in that order\n  var keys = Object.keys(data).sort();\n  var i = keys.length - 1;\n  var key;\n\n  for (; ~i; i -= 1) {\n    key = keys[i];\n    content = content.replace(new RegExp(prefix + key + suffix, 'g'), data[key]);\n  }\n\n  return content;\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-file-include/node_modules/gulp-file-include/lib/indent.js":"module.exports = function(src, index, dest) {\n  var indent = '';\n  var valid = false;\n\n  while (src[index -= 1] == 0) {\n    if (src[index] === '\\n') {\n      valid = true;\n      break;\n    }\n    indent = src[index] + indent;\n  }\n\n  if (valid) {\n    dest = dest.split('\\n').map(function(str, i) {\n      return str == 0 || i === 0 ? str : (indent + str);\n    }).join('\\n');\n  }\n\n  return dest;\n};\n"}